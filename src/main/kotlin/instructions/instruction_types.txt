Guide
https://developer.arm.com/documentation/ddi0403/d/Application-Level-Architecture/Instruction-Details/Alphabetical-list-of-ARMv7-M-Thumb-instructions?lang=en


Operations
ADD:
    ADD{S}<c>.W <Rd>,<Rn>,#<const> // immediate
    ADD<c> <Rd>,<Rn>,<Rm>          // register
    ADD{S}<c>.W <Rd>,<Rn>,<Rm>{,<shift>}
    ADD<c> <Rd>,SP,#<imm8>         // SP plus register
    ADD<c> SP,SP,#<imm7>           // SP plus immediate
SUB:
    SUB<c> <Rd>,SP,#<imm8>
    SUB<c> SP,SP,#<imm7>


Move Instructions
MOV:
    MOV<c> <Rd>,#<imm8>       // immediate
    MOV{S}<c>.W <Rd>,<Rm>     // register
    MOV{S} <Rd>,<Rm>,ROR #<n> // shifted immediate
    MOV{S} <Rd>,<Rm>,ROR <Rs> // shifted register
    MOVS instruction not seen in reference compiler yet, no need for flags
    Have not seen shifts yet
MOVLT
MOVLTE
MOVEQ
MOVGT
MOVGE
MOVNE
    Same as MOV but with additional info to take into account the condition


Stack Instructions
PUSH
POP
    PUSH/POP {reg}

Label


Logical Instructions
CMP:
    CMP reg, #imm
    CMP reg, reg
AND:
    AND{S}<c> <Rd>,<Rn>,#<const>
    AND{S}<c>.W <Rd>,<Rn>,<Rm>{,<shift>}
ORR:
    ORR{S}<c> <Rd>,<Rn>,#<const>
    ORR{S}<c>.W <Rd>,<Rn>,<Rm>{,<shift>}


Branch Instructions
B:
    B label
BEQ:
    BEQ label
BL:
    BL label


Load Instructions
LDR:
    LDR<c> <Rt>,<label>             // literal
    LDR<c> <Rt>, [<Rn>{,#<imm5>}]   // immediate
    LDR<c> <Rt>,[<Rn>,<Rm>]         // register
LDRSB:
    LDRSB<c> <Rt>, <label>
    LDRSB<c> <Rt>, [<Rn>, <Rm>]
    LDRSB<c> <Rt>, [<Rn>, #-<imm8>]


Store Instructions
STR:
STRB:
    STR<c> <Rt>, [<Rn>{,#<imm5>}](!)   // immediate
    STR<c> <Rt>,[<Rn>,<Rm>](!)         // register
! means "Register write-back":
 the base register is used to calculate the address of the transfer, and is updated


- We would need a register class

- The second operand of most instructions can be different types such as
  imm, register, or label with even offsets, so we would need a class that could
  handle all the different types

