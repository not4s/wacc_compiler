#!/usr/bin/env python3
import os, sys, shutil, argparse

COMPILE_DIR = 'compiled_code'

parser=argparse.ArgumentParser(description='Script compiling a wacc file')

parser.add_argument('src_file', help='file destination of the wacc file')
parser.add_argument('-d', action="store_true", help='flag indicating the user\'s wish to save the output in the default file location \'wacc_test/compiled_code/\'')

options = parser.parse_args()
args = vars(options)

# tokenize the path given
path = args["src_file"]

# check if the file Exists
if not os.path.isfile(path):
    print("Error: Program not found at {path}")
    sys.exit()

file_type = path.split('.')[-1]
# check the file type
if file_type != 'wacc':
    print("Error: File given is not a wacc file")
    sys.exit()

# build path
file_name = os.path.splitext(os.path.basename(path))[0]
test_name = ''.join(file_type).split('/')[-1]

if(options.d):
    # the user wants to save the output of the file 
    errCode = os.system(f"java -jar target/WACC_06-1.0-SNAPSHOT-jar-with-dependencies.jar {args['src_file']}")
    # On Unix, the return value is a 16-bit number whose high byte is the exit status (if the signal number is zero)
    if(errCode >> 8 != 0):
        sys.exit(errCode >> 8)

    # TODO: figure out a better way rather than repeating twice
    stream = os.popen(f"java -jar target/WACC_06-1.0-SNAPSHOT-jar-with-dependencies.jar {args['src_file']}")
    output = stream.read()
    
    # move to correct directory
    os.chdir("wacc_test")

    # if compilation directory does not exist, make the directory
    for d in ((f"{COMPILE_DIR}/{path}").split("/")[:-1]):
        if not os.path.exists(d):
            os.makedirs(d)
        os.chdir(d)

    # write output to .s file in compilation directory
    compiled_fname = file_name + '.s'
    with open(compiled_fname, 'w') as f:
        f.write(output)
        f.close()
        shutil.move(compiled_fname, compiled_fname)

    # prints success if reached
    print("Compiled successfully")
else:
    # the user has not specified that the output needs to be saved in a file; print output to cmd
    errCode = os.system(f"java -jar target/WACC_06-1.0-SNAPSHOT-jar-with-dependencies.jar {args['src_file']}")
    # On Unix, the return value is a 16-bit number whose high byte is the exit status (if the signal number is zero)
    sys.exit(errCode >> 8)