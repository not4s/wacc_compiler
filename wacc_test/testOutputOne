#!/usr/bin/env python3
from code import compile_command
from subprocess import Popen, PIPE, STDOUT
import os, sys, shutil, argparse

NO_OF_ARGS = 1
ASSEMBLY_CODE_PREFIX = "compiled_code"
REFCOMPILER_OUTPUT = "-x"
REFCOMPILER_ASSEMBLY = "-a"
COMPILED_CODE_DIR = "wacc_test/compiled_code"

parser=argparse.ArgumentParser(description='Script testing correctness of the compiler output')

parser.add_argument('src_file', help='file destination of the wacc file')
parser.add_argument('-x', nargs=None, help='compares the output of the file')
parser.add_argument('-a', nargs=None, help='compares the assembly output of the file')
parser.add_argument('-p', type=str, nargs='?', help='optional input into file')

args=vars(parser.parse_args())

# tokenize the path given
path = args["src_file"]

# check if the file Exists
if not os.path.isfile(path):
    print(f"Error: Program not found at {path}")
    sys.exit()

# check the file type
if path.split('.')[-1] != 'wacc':
    print("Error: File given is not a wacc file")
    sys.exit()

test_name = path.split('/')[-1].split('.')[0]

# get assembly from WACC compiler
os.chdir("..")
stream = os.popen(f"./compile wacc_test/{path}")
wacc_assembly = stream.read()

def compareStrings(correct: str, received: str) -> str:
    compareOutput = ""
    for c, r in zip(correct, received):
        if (c == r):
            compareOutput += f"  {c}\n"
        else:
            compareOutput += f"? {c}\n"            
    return compareOutput

# navigates to a valid directory and returns the previous working directory
def navigateToDirectory(path: str) -> str:
    curr_directory = os.getcwd()
    os.chdir(os.path.abspath(path))
    return curr_directory

# check that the output from the program is the same
def compareOutput() -> str:
    prevDirectory = navigateToDirectory(COMPILED_CODE_DIR)
    # emulate WACC assembly code
    stream = os.popen(f"arm-linux-gnueabi-gcc -o {ASSEMBLY_CODE_PREFIX}{test_name} -mcpu=arm1176jzf-s -mtune=arm1176jzf-s {ASSEMBLY_CODE_PREFIX}{test_name}.s")
    stream = os.popen(f"qemu-arm -L /usr/arm-linux-gnueabi/ {ASSEMBLY_CODE_PREFIX}{test_name}")
    # get output from program
    wacc_emulated_output = stream.read()
    # compare output from refCompile to output from program
    os.chdir("..")
    stream = os.popen(f'echo {args["p"]} | ./refCompile {REFCOMPILER_OUTPUT} {path}')
    refCompiler_emulated_output = stream.read()
    navigateToDirectory(prevDirectory)
    return compareStrings(refCompiler_emulated_output, wacc_emulated_output)

def compareAssembly() -> str:
    # get assembly from refCompile
    stream = os.popen(f"./refCompile {REFCOMPILER_ASSEMBLY} {path}")
    refCompiler_assembly_output = stream.read()
    return compareStrings(refCompiler_assembly_output, wacc_assembly)

stringBuffer = "TODO"

if(args["a"] != None):
    stringBuffer += compareAssembly()
else: # if no argmuents provided by default compares output
    stringBuffer += compareOutput()

print("Compile not implemented fully")