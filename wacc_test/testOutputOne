#!/usr/bin/env python3
import os, sys, argparse, re, subprocess
import difflib as dl

REFCOMPILER_OUTPUT = "-x"
REFCOMPILER_ASSEMBLY = "-a"
COMPILED_CODE_DIR = "wacc_test/compiled_code"
REFCOMPILER_SPLIT = "==========================================================="
EXTENSION_OUTPUT_SPLIT = "# Output:"
EXIT_CODE_REGEX = "# Exit:"

red="\033[0;31m"
green="\033[0;32m"
clear="\033[0m"

# navigates to a valid directory and returns the previous working directory
def navigateToDirectory(path: str) -> str:
    curr_directory = os.getcwd()
    os.chdir(os.path.abspath(path))
    return curr_directory

# intelligently compares two strings displaying - or + where lines are missed or added
def compareStrings(correct: str, received: str) -> str:
    correct_list = filter(lambda a: a != "", correct.split("\n"))
    result_list = filter(lambda a: a != "", received.split("\n"))
    # replace all tabs with four spaces
    correct_list = map(lambda line: line.replace("\t", "    "), correct_list)
    result_list = map(lambda line: line.replace("\t", "    "), result_list)
    # calculate difference
    differences = ""
    for diff in list(dl.unified_diff(list(correct_list), list(result_list)))[3:]:
        differences += f"{diff}\n"
    return differences[:-1]

# removes all occurrances of any addresses that will be printed by the compiler.
# assumes that the user won't be printing an numbers in the same format as the
# address, i.e. 0x[0-9]+ = .*
def removeAddressOccurances(consoleOutput: str) -> str:
    output = re.sub("0x[a-f0-9]+", '', consoleOutput)
    return re.sub("#addrs#", '', output)

# goes to the wacc_test directory and returns the previous working directory
# assumes that wacc_test is a parent on the cwd
def goToWaccTestDir() -> str:
    currentDir = os.getcwd()
    pathToGoDown = currentDir[currentDir.index("wacc_test") + len("wacc_test/"):].split("/")
    pathToWaccTest = len(pathToGoDown) * "../"
    os.chdir(pathToWaccTest)
    return currentDir

# goes to the directory that the .s file is located in and returns the previous working directory
def getToTestDir(path: str) -> str:
    currentDir = os.getcwd()
    if(path[-len(".wacc"):] == ".wacc"):
        test_name = path.split('/')[-1].split('.')[0]
        getToTestDir(path[:-len(test_name)-len(".wacc")])
    else:
        os.chdir(f"{COMPILED_CODE_DIR}/{path}")
    return currentDir

# extracts the expected output from inbetween the ======= in the refCompiler
# Also extract error code.
def extractGoodStuffFromRefCompile(refCompileOutput: str):
    exit_code = re.search(r'The exit code is ([0-9]+).', refCompileOutput).group(1)
    return refCompileOutput.split(REFCOMPILER_SPLIT)[1], exit_code

def extractGoodStuffFromWaccExtensionFile():
    # compare output extracted from test file to output from program; go into refCompile's directory
    if EXTENSION_OUTPUT_SPLIT not in wacc_sourceCode:
        print(f"all extension files must contain the line '{EXTENSION_OUTPUT_SPLIT}(.*){EXTENSION_OUTPUT_SPLIT}' to indicate desired output from assembly")
        sys.exit(-1)
    
    exit_code = getExitCodeFromWaccFile()
    output = re.search(rf'{EXTENSION_OUTPUT_SPLIT}((.*\n)*){EXTENSION_OUTPUT_SPLIT}', wacc_sourceCode).group(1) 
    # trim comments from predicted output
    # assume that the form of output is always ('# (content)\n')*
    output = re.sub( "# ", '', output)
    output = removeAddressOccurances(output)

    return output, exit_code

def getExitCodeFromWaccFile() -> int:
    if EXIT_CODE_REGEX not in wacc_sourceCode:
        return 0
    else:
        return int(re.search(rf'{EXIT_CODE_REGEX} ((-|\+)?[0-9]+)', wacc_sourceCode).group(1))


def emulateAssembly() -> str:
    # emulate WACC assembly code
    subprocess.run(f"arm-linux-gnueabi-gcc -o {test_name} -mcpu=arm1176jzf-s -mtune=arm1176jzf-s {test_name}.s", shell=True)
    try:
        sp = subprocess.run(f"timeout 10s qemu-arm -L /usr/arm-linux-gnueabi/ {test_name}", capture_output=True, text=True, shell=True)
        # get output from program
        wacc_emulated_output = str(sp.stdout)
        wacc_exit_code = sp.returncode
    except UnicodeDecodeError:
        print(f"WARNING: The file {test_name} could not be decoded (utf-8?)")
        wacc_emulated_output = ""
        wacc_exit_code = -1
    return wacc_emulated_output + f"\nExit code returned: {wacc_exit_code}"

# check that the output from the program is the same
def compareOutput() -> str:
    # emulate WACC assembly code
    wacc_emulated_output = emulateAssembly()

    # compare output from refCompile to output from program; go into refCompile's directory
    prevDirectory = goToWaccTestDir()
    stream = os.popen(f'echo {args["p"]} | ./refCompile  {REFCOMPILER_OUTPUT} {path}')
    refCompiler_emulated_output, ref_exit_code = extractGoodStuffFromRefCompile(stream.read())
    navigateToDirectory(prevDirectory)

    # Append exit code returned to the end
    refCompiler_emulated_output += f"\nExit code returned: {ref_exit_code}"

    return compareStrings(removeAddressOccurances(refCompiler_emulated_output), removeAddressOccurances(wacc_emulated_output))

def compareAssembly() -> str:
    # get assembly from refCompile
    prevDirectory = goToWaccTestDir()
    stream = os.popen(f"./refCompile {REFCOMPILER_ASSEMBLY} {path}")
    refCompiler_assembly_output = extractGoodStuffFromRefCompile(stream.read())
    # remove line numbers from refCompiler Output
    refCompiler_assembly_output = map(lambda line: line.lstrip('0123456789'), refCompiler_assembly_output.split("\n"))
    refCompiler_assembly_output = '\n'.join(refCompiler_assembly_output)
    navigateToDirectory(prevDirectory)

    return compareStrings(refCompiler_assembly_output, wacc_assembly)

def compareExtensionOutput() -> str:
    predicted_output, predicted_exit_code = extractGoodStuffFromWaccExtensionFile()
    
    # emulate WACC assembly code
    wacc_output = emulateAssembly()
    
    # Append exit code returned to the end
    predicted_output += f"\nExit code returned: {predicted_exit_code}"

    return compareStrings(removeAddressOccurances(predicted_output), removeAddressOccurances(wacc_output))

parser=argparse.ArgumentParser(description='Script testing correctness of the compiler output')

parser.add_argument('src_file', help='file destination of the wacc file')
parser.add_argument('-x', action="store_true", help='compares the output of the file')
parser.add_argument('-a', action="store_true", help='compares the assembly output of the file')
parser.add_argument('-p', default="default_input", type=str, nargs=1, help='optional input into file (by default set to \"default_input\")')
parser.add_argument('-e', action="store_true", help='a flag indicating that the following file was produced as a result of an extension. ' \
                                                    'Therefore it might be that the refCompiler does not support the same features. The output ' \
                                                    'must be extracted from the testfile which contains the output for all extension files in ' \
                                                    f'the form ^{EXTENSION_OUTPUT_SPLIT}\\n(.*){EXTENSION_OUTPUT_SPLIT}')

options = parser.parse_args()
args = vars(options)

# tokenize the path given
path = args["src_file"]

# check if the file Exists
if not os.path.isfile(path):
    print(f"Error: Program not found at {path}")
    sys.exit()

# check the file type
if path.split('.')[-1] != 'wacc':
    print("Error: File given is not a wacc file")
    sys.exit()

test_name = path.split('/')[-1].split('.')[0]
path_to_assembly = path[:-len(test_name)-len(".wacc")]

with open(path, 'r') as f:
    wacc_sourceCode = f.read()
    if("read" in wacc_sourceCode):
        print(f"Skipping IO input test: {path}")
        sys.exit()

# change directory to WACC_06/
os.chdir("..")

errCode: int = os.system(f"timeout 20s ./compile wacc_test/{path} -d") >> 8
# if the error code is because of an invalid program compilation
if (errCode in [100, 200]):
    if errCode == getExitCodeFromWaccFile():
        os.system(f"echo \"{green}pass {path}{clear} invalid program, don't compile\"")
        sys.exit(0)
    else:
        os.system(f"echo \"{red}FAIL {path}{clear} program failed but not for the reason expected\"")
        sys.exit(errCode)
# if the error code is not a pass
elif (errCode != 0):
    os.system(f"echo \"{red}FAIL {path}{clear} Erroneous exception in running Main.kt\"")
    sys.exit(errCode)

# change directory to directory with .s file
getToTestDir(path_to_assembly)

with open(test_name + '.s', 'r') as f:
    wacc_assembly = f.read()

stringBuffer = ""
fail: bool = False

# cwd = directory of .s file

if(not options.e):
    if(options.a):
        stringBuffer += f"{REFCOMPILER_SPLIT}\nDifferences in assembly\n{REFCOMPILER_SPLIT}\n"
        diff = compareAssembly()
        if len(diff) != 0:
            fail = True
            stringBuffer += f"{diff}\n"
        else:
            stringBuffer += "Assembly code matches\n"

    # if no argmuents provided by default compares output
    if options.x or (not options.x and not options.a):
        stringBuffer += f"{REFCOMPILER_SPLIT}\nDifferences in output\n{REFCOMPILER_SPLIT}\n"
        diff = compareOutput()
        if len(diff) != 0:
            fail = True
            stringBuffer += diff
        else:
            stringBuffer += "Output matches\n"
else:
    # the file presented is an extension project. The refcompiler must not be used.
    # there is no trivial way of comparing the assembly output so assume that only the output is
    # to be compared
    if(len(wacc_sourceCode) > 0):
        diff = compareExtensionOutput()
        if len(diff) != 0:
            fail = True
            stringBuffer += diff
        else:
            stringBuffer += "Output matches\n"
        stringBuffer += f"{REFCOMPILER_SPLIT}\nDifferences in output\n{REFCOMPILER_SPLIT}\n"

with open(test_name + '.output', 'w') as f:
    f.write(stringBuffer)

if(fail):
    os.system(f"echo \"{red}FAIL {path}{clear} output doesn't match\"")
    sys.exit(1)
else:
    os.system(f"echo \"{green}pass {path}{clear}\" output matches!")
    sys.exit(0)
